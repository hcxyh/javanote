/**
 * 
 */
/**
 * https://github.com/wenweihu86/raft-java
 * @author hcxyh  2018年8月12日
 *
 */
package com.xyh.distribute;

/**
 * TODO  主要是关注,不同的 服务注册发现组件区别:
 * 微服务中的服务发现:
 	1.服务发现是关于查找服务提供者的网络位置。
 	2.如果一个团队正在维护的是一台物理服务器，那么配置文件将主要满足需求。
	如果你正在使用云，由于重新启动，失败和缩放，您的服务可能具有动态网络位置。因此，手动维护配置文件就不可行了。
	3.
	服务提供者在服务注册表进入注册时注册自己，并在注销时自行注销。
	服务消费者从注册中心获取提供者的位置，然后与提供者交谈。
	服务注册中心维护提供者的最新位置。

	FIXME 阿里巴巴为什么不用 ZooKeeper 做服务发现？
	[https://mp.weixin.qq.com/s/uMj3JEhgyYw4CaIhP1-GTQ]
	1.注册中心是 CP 还是 AP 系统?
		数据一致性需求分析
		注册中心最本质的功能可以看成是一个 Query 函数 Si = F(service-name)，
		以 service-name 为查询参数，service-name 对应的服务的可用的 endpoints (ip:port) 列表为返回值.
		先来看看关键数据 endpoints (ip:port) 不一致性带来的影响，即 CAP 中的 C 不满足带来的后果 :
	2.服务规模、容量、服务联通性
		你所在公司的“微服务”规模有多大？数百微服务？部署了上百个节点？那么 3 年后呢？
		互联网是产生奇迹的地方，也许你的“服务”一夜之间就家喻户晓，流量倍增，规模翻番！
		当数据中心服务规模超过一定数量 (服务规模 =F{服务 pub 数, 服务 sub 数})，
		作为注册中心的 ZooKeeper 很快就会像下图的驴子一样不堪重负.
		
		其实当 ZooKeeper 用对地方时，即用在粗粒度分布式锁，分布式协调场景下，
		ZooKeeper 能支持的 tps 和支撑的连接数是足够用的，因为这些场景对于 ZooKeeper 的扩展性和容量诉求不是很强烈。
		但在服务发现和健康监测场景下，随着服务规模的增大，无论是应用频繁发布时的服务注册带来的写请求，
		还是刷毫秒级的服务健康状态带来的写请求，还是恨不能整个数据中心的机器或者容器皆与注册中心有长连接带来的连接压力上，
		ZooKeeper 很快就会力不从心，而 ZooKeeper 的写并不是可扩展的，不可以通过加节点解决水平扩展性问题。
		要想在 ZooKeeper 基础上硬着头皮解决服务规模的增长问题，一个实践中可以考虑的方法是想办法梳理业务，
		垂直划分业务域，将其划分到多个 ZooKeeper 注册中心，但是作为提供通用服务的平台机构组，
		因自己提供的服务能力不足要业务按照技术的指挥棒配合划分治理业务，真的可行么？
		而且这又违反了因为注册中心自身的原因（能力不足）破坏了服务的可连通性，举个简单的例子，
		1 个搜索业务，1 个地图业务，1 个大文娱业务，1 个游戏业务，他们之间的服务就应该老死不相往来么？
		也许今天是肯定的，那么明天呢，1 年后呢，10 年后呢？
		谁知道未来会要打通几个业务域去做什么奇葩的业务创新？注册中心作为基础服务，无法预料未来的时候当然不能妨碍业务服务对未来固有联通性的需求。

 */