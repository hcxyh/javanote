package com.xyh.log;

/**
 * 
 * @author hcxyh  2018年8月13日
 * TODO https://mp.weixin.qq.com/s/Xtmc_VjGW8ePySC5KBw57Q
 */
public class LogNote {
	
	/**
	 * 1.日志门面
	 * 		slf4j , apache-common
	 * 2.日志实现
	 * 		logback,log4j,log4j2
	 * 3.同步日志,异步日志
	 * 
	 * 4.elk
	 * 
	 * 5.flume+kafka
	 * 
	 * facebook,进行日志脱敏
	 * 
	 * 6.日志的配置
	 * 		1.日志级别
				ERROR ：ERROR是最高级别错误，反映系统发生了非常严重的故障，无法自动恢复到正常态工作，需要人工介入处理。系统需要将错误相关痕迹以及错误细节记录ERROR日志中，方便后续人工回溯解决。
				WARN  ：WARN是低级别异常日志，反映系统在业务处理时触发了异常流程，但系统可恢复到正常态，下一次业务可以正常执行。但WARN级别问题需要开发人员给予足够关注，往往表示有参数校验问题或者程序逻辑缺陷，当功能逻辑走入异常逻辑时，应该考虑记录WARN日志。
				INFO  ：INFO日志主要记录系统关键信息，旨在保留系统正常工作期间关键运行指标，开发人员可以将初始化系统配置、业务状态变化信息，或者用户业务流程中的核心处理记录到INFO日志中，方便日常运维工作以及错误回溯时上下文场景复现。
				DEBUG ：DEBUG日志是INFO日志的好帮手，开发人员可以将各类详细信息记录到DEBUG里，起到调试的作用，包括参数信息，调试细节信息，返回值信息等等。其他等级不方便显示的信息都可以通过DEBUG日志来记录。
			2.需要打印日志的点
				1.编程语言提示异常(结合异常报错使用 warn和error)
				2.业务流程预期不符(括外部参数不正确，)
				3.系统核心角色，组件关键动作
				4.系统初始化:启动参数。核心模块或者组件初始化过程中往往依赖一些关键配置，根据参数不同会提供不一样的服务。务必在这里记录INFO日志，打印出参数以及启动完成态服务表述。
			3.警惕日志性能代价
				1.有必要才记录日志，频繁过量日志对性能是有损耗的，并且这种风险不常在系统正常时出现，
				2.Logger获取 :  建议 static 
				3.输出等级校验，判断一下(logger.isXXXEnabled()，对于性能有很大提升，在其他外观框架或者log4j 2.x中已经自动实现。
				4.输出格式：禁止使用字符串拼接，使用参数方式
				5.样式配置: 布局配置输出的信息也会影响到性能，需要根据logger的具体使用场景来选择输出合适信息。
				上述几点可以看出，核心都是减少日志量 ，前两点偏向设计，后四点偏向日志框架及习惯，并且这四点目前一些框架组合已经能帮开发人员减少不少工作，比如log4j2.x在实例获取，输出等级判断都有优化。除开减少日志量，还需要注意多线程以及高并发情况下的日志输出。日志输出本身是写磁盘操作，自然会有性能瓶颈。更多属于日志框架选择及优化方面，选择日志框架时除了考虑正常功能使用，务必关注该日志框架影响性能的细节，日志的出发点是帮助处理问题，如果成为隐患就得不偿失了
			4.日志内容
				时间，包含时区信息和毫秒，这个工作往往日志框架足以支持。核心属性之一。
				日志级别，例如 debug、info 以及warn、error
				会话标识，能知道是哪个客户端或者是哪个用户触发，登陆账号，seesion信息等
				功能标识，功能标识的意义在于方便日志搜索，跟踪指定功能的完整轨迹，是INFO，DEBUG日志的常见技巧。跟logger分类同一道理，更细分功能标识则是方法标识，更多使用在DEBUG做在线调试使用。
				精炼的内容，内容永远是日志的核心，结合上述使用场景，简单来说包括场景信息（谁，什么功能等），状态信息(开始，中断，结束)以及重要参数.
				其他信息，其他可能的有用信息包括：版本号，线程号等等。
			5.实践
				一旦抛出异常，必须catch处理，挑选正确方式：
					打印日志：当前逻辑就能处理掉的，不需要上层再处理的，或者本身就是最上层。
					重抛异常：判断异常当前无法处理，需要继续向上抛出，可以经过异常包装转义。需要注意当前是否为最上层。
					避免过大的try块，尽量保持一个try块对应一个或多个异常。
				细化异常的类型，避免不顾细节抛出Excetpion。异常类的作用就是告诉Java编译器我们想要处理的是哪一种异常，然后针对具体的异常类进行不同的处理。
				函数返回值能表达错误含义，则不应该打印ERROR日志，防止ERROR日志泛滥。错误不一定到边界才能终止，只要返回到能处理它的地方就应当终止。
				
	 */
	
}
