package com.xyh.java.Exception;

/**
 * 发生异常我们未做处理，java虚拟机jvm会做默认处理，把异常的名称，原因，具体位置的详细信息打印在控制台。
 * 同时程序会结束，不会执行后面的语句。    x修改jvm的native方法可以不输出异常。
 * 一个线程中多个方法一次调用,形成多个栈帧.
 * 当最底层的方法,在try{}里面发生异常的时候,有catch执行catch{}块中的方法，
 * 没有的话,向下继续执行.当catch{}中throw Exception,
 * try 的范围就是体现在异常表行记录的起点和终点。JVM 在 try 住的代码区间内如有异常抛出的话，就会在当前栈桢的异常表中，
 * 找到匹配类型的异常记录的入口指令号，然后跳到该指令处执行。异常指令块执行完后，再回来继 续执行后面的代码。
 * JVM 按照每个入口在表中出现的顺序进行检索，如果没有发现匹配的项，JVM 将当前栈帧从栈中弹出，再次抛出同样的异常。
 * 当 JVM 弹出当前栈帧时，JVM 马上终止当前方法的执行，并且返回到调用本方法的方法中，但是并非继续正常执行该方法，
 * 而是在该方法中抛出同样的异常，这就使得 JVM 在该方法中再次执行同样的搜寻异常表的操作。
 * 上面那样的内层方法无法处理异常的层层向外抛，层层压栈，这样就形成一个异常栈。异常栈十分有利于我们透析问题之所在，
 * 例如 e.printStackTrace(); 或者带参数的 e.printStackTrace();
 *  方法可将异常栈信息定向输出到他处，还有 log4j 的 log.error(Throwable) 也有此功效。
 *  若是在行径的哪层有能力处理该异常则已，否则直至 JVM，直接造成 JVM 崩溃掉。
 *  例如当 main() 方法也把异常抛了出去，JVM 此刻也就到了生命的尽头。
 * 
 * @author hcxyh  2018年8月11日
 *
 */
public class ExceptionNote {
	
	/**
	 * Throwable： 有两个重要的子类：Exception（异常）和 Error（错误），二者都是 Java 异常处理的重要子类，各自都包含大量子类。
	 * 
	 * Error（错误）:是程序无法处理的错误，表示运行应用程序中较严重问题。
	 * 大多数错误与代码编写者执行的操作无关，而表示代码运行时 JVM（Java 虚拟机）出现的问题。
	 * 例如，Java虚拟机运行错误（Virtual MachineError），
	 * 当 JVM 不再有继续执行操作所需的内存资源时，将出现 OutOfMemoryError。
	 * 这些异常发生时，Java虚拟机（JVM）一般会选择线程终止。
	 * 这些错误表示故障发生于虚拟机自身、或者发生在虚拟机试图执行应用时，
	 * 如Java虚拟机运行错误（Virtual MachineError）、类定义错误（NoClassDefFoundError）等。
	 * 这些错误是不可查的，因为它们在应用程序的控制和处理能力之 外，
	 * 而且绝大多数是程序运行时不允许出现的状况。对于设计合理的应用程序来说，
	 * 即使确实发生了错误，本质上也不应该试图去处理它所引起的异常状况。
	 * 在 Java中，错误通过Error的子类描述。
	 * 
	 * Exception（异常）:是程序本身可以处理的异常。
	 * RuntimeException。RuntimeException 类及其子类表示“JVM 常用操作”
	 * 引发的错误。例如，若试图使用空值对象引用、除数为零或数组越界，
	 * 则分别引发运行时异常（NullPointerException、ArithmeticException）和 ArrayIndexOutOfBoundException。
	 * 注意：异常和错误的区别：异常能被程序本身可以处理，错误是无法处理。
	 * 
	 * 可查的异常（checked exceptions）和不可查的异常（unchecked exceptions）。
	 * 可查异常（编译器要求必须处置的异常）：
	 * 正确的程序在运行中，很容易出现的、情理可容的异常状况。可查异常虽然是异常状况，
	 * 但在一定程度上它的发生是可以预计的，而且一旦发生这种异常状况，就必须采取某种方式进行处理。
	 * 除了RuntimeException及其子类以外，其他的Exception类及其子类都属于可查异常。
	 * 这种异常的特点是Java编译器会检查它，也就是说，当程序中可能出现这类异常，
	 * 要么用try-catch语句捕获它，
	 * 要么用throws子句声明抛出它，否则编译不会通过。
	 * 
	 * 不可查异常(编译器不要求强制处置的异常):包括运行时异常（RuntimeException与其子类）和错误（Error）。
	 * Exception 这种异常分两大类运行时异常和非运行时异常(编译异常)。程序中应当尽可能去处理这些异常。
	 *  
	 */
	
}
