package com.xyh.authority;

public class RBAC {
	
	/**
	 * https://blog.csdn.net/yangwenxue_admin/article/details/73936803
	 */
	/**
	 1.权限设计(对若干元素能否做的若干操作)
	 	权限的名词属性：api接口、页面、功能点。
		权限的动词属性：可操作、不可操作。
		{
			1.最小特权原则
			2.数据抽象原则
		}
	 2.服务端的权限
	 	1.前后端分离下的服务端，本质而言只是提供接口的或者rpc服务等其他资源服务的服务提供方。
		2.服务端能提供的权限的鉴权机制的对象：接口服务（api或者其他形式的服务）不包含前端的页面或页面中的功能点。
		3.前端或移动端的页面元素的控制和鉴权实质上不由服务端控制。
		4.服务端可以单独的控制服务的权限。
		5.服务端的服务对象是前端、移动端、第三方客户端，提供的服务是接口服务。
	在前后端已经分离的情况下，服务端对于前端而言只是接口的提供者，但无权干涉前端页面的展示，服务端对于前端而言，
	能提供的是仅鉴权服务的接口而已，但是页面的构成，页面的栏目菜单或页面内的功能点的构成均由前端单独完成的。
	(前端的路由页面只是在登录或者获取资源权限时,自己进行控制)
	3.前端或移动端的权限
		前端的鉴权包含页面的可访问，和页面上的某项功能按钮是否可以操作。
		前端和移动端的服务对象是用户，提供的服务是可视化的页面。
	4.Q存在的问题？
	因为服务端和前端的鉴权对象不一致，服务端只能鉴权到api接口，
	那么是否将api接口和前端的页面乃至页面功能点进行数据库表与表层面的绑定关系。
	如果进行了进行了表与表之间的绑定关系，那么整个权限系统的维护量，是否能在能承受范围之内。
	如果不进行表与表之间的绑定关系，前端页面在操作功能的时候，服务端如何鉴权页面调用的api接口是否在用户可操作的权限之内？
	A：
	其实上面的问题则需要一个取舍，要么增加运维成本严格控制前端调用api接口的关系，偏重服务端的接口服务鉴权。
	要么是给api接口和前端页面及功能点再提供一个通性的逻辑判断处理，
	如：页面及调用的功能点属于某个业务模块的操作许可，而页面触发的接口也刚好是这个业务模块的操作许可，
	那么鉴权通过，否则鉴权失败。这种就是属于侧重前端对于用户的控制，弱化了接口级的控制。
	5.3.角色与权限的关系
	通过1，2的描述，基本确定了权限的定义和划分一个权限的通用法则。用户在系统中最终是通过权限来使用各种功能点，
	是否有必要在用户和权限中间再额外的附加一个关系。在我们现在的权限设计中，是增加了这样一层关系的，就是角色。
	1.减少操作层面的重复性。角色其实就是一组权限的集合，是权限集合的更高级抽象，为了便于运维和实际管理，通过角色的赋予，
	替代了权限赋予用户的繁琐性，在一套系统中，普遍情况都是权限的数量多于角色的数量。
	2.权限是控制对象和操作集合，它本身不存在任何状态，但是在赋予在用户身上则拥有了状态，比如权限A中允许用户访问页面A，
	权限B允许用户访问页面B，权限D运行用户访问B页面，但是不允许访问A页面。那么这层关系的维护在角色层面的话，会更加清晰，
	也就是说本身角色具有权限集合组装的策略问题，对于互斥的权限有不同的方案处理。（权限中没有某个操作和权限中禁止某个操作，是两个不同的角度，不能混为一谈）
	3.因为权限的可能存在互斥性，在实际业务中也会引发角色的互斥性，举一个现实中的案例来解释互斥性：
	张三是软件部的负责人但因为工作的特殊性也同样隶属于业务部的普通员工，我们设定负责人是可以要求人事部门给本部门进行招聘的，
	在实际的情况中，张三能给软件部招聘新员工，但是不能给业务部招聘员工。我们把这个案例运用在系统中，张三则是拥有负责人和普通员工两个角色，
	但是招聘的功能如果不加以控制，则会发生张三给业务部招人的结果。于是为了解决角色的这类问题，引入了职责划分的方案。
	4.职责划分分为：静态、动态。所谓静态职责划分则是在角色创建之初就已经确定了角色的职责内容。
	动态职责划分是系统运行过程中对用户已有的角色进行控制，
	例如：某些角色不能共存在用户身上（互斥）、角色或角色的分配数量限定（控制用量）、角色与角色同时只能激活一个进行使用（时刻唯一）。
	5.数据表的设计思路
	（1）问：权限表是否有必要存在？
	（1）答：这个要结合系统的实际使用场景进行考虑，如果系统中的权限的对象很单一，比如只有页面，或者只有api接口的话，
	其实权限表可有可无。增加权限表反而会导致初始化项目权限的工作量增加。但是若系统中的权限对象是多个，那么权限表的存在就有了更深层次的意义。
	在权限对象是多个的情况，权限表的存在就是为了更好更抽象的组合“最小特权”及“责任划分”的操作对象。
	同时，一旦系统中的操作对象增加了，只需要给权限表增加一个对象表和关系表就可以了。这样易于扩展。
	（2）问：api接口和页面实际上是没有关系的，但是在鉴权活动是有关系的，页面若和api没有一点绑定联系的话，
	服务端接口调用的时候则要么拦截掉所有指定的接口（页面和api接口没绑定的话，则页面的接口调用都不能成功），
	服务端接口完全不拦截接口，也会不安全，但是api接口和页面功能在表结构层面的绑定会产生运维的大量工作成本，如何更好的设计。
	（2）答：在权限如何划分中已经提过了这一点，在表结构中，我们可以增加一张业务模块表和操作表（也可以在数据字典表中增加这两类数据），
	我们可以在页面和功能点钟 绑定业务模块和操作表关系，在api接口的代码层面去绑定业务模块和操作，在逻辑上绑定关系，解耦表结构之间的关系，
	那么可以在一定程度上解决这一点，这样做只会出现一种问题，那就是用户访问页面的时候可调用的api接口会比实际可调用的接口数要多，
	但是前端权限管理会隐藏功能点，这样就在可视化的程度上解决了这个问题。
	 */
}
