package com.xyh.mq;

/**
 * 总结：mq的使用场景
 * @author hcxyh  2018年8月13日
 *
 */
public class UseScene {

	/**
	 1.异步处理
	 	用户注册后，需要发注册邮件和注册短信,传统的做法有两种1.串行的方式;2.并行的方式 
	 	(1)串行方式:将注册信息写入数据库后,发送注册邮件,再发送注册短信,以上三个任务全部完成后才返回给客户端。 这有一个问题是,邮件,短信并不是必须的,它只是一个通知,而这种做法让客户端等待没有必要等待的东西.
	 	(2)并行方式:将注册信息写入数据库后,发送邮件的同时,发送短信,以上三个任务完成后,返回给客户端,并行的方式能提高处理的时间。 
	 	(3)消息队列 ：引入消息队列后，把发送邮件,短信不是必须的业务逻辑异步处理 
	 2.应用解耦
	 	双11是购物狂节,用户下单后,订单系统需要通知库存系统,传统的做法就是订单系统调用库存系统的接口. 
	 	1.这种做法有一个缺点:
			当库存系统出现故障时,订单就会失败。订单系统和库存系统高耦合.
		2.订单系统:用户下单后,订单系统完成持久化处理,将消息写入消息队列,返回用户订单下单成功。
			库存系统:订阅下单的消息,获取下单消息,进行库操作。 
		就算库存系统出现故障,消息队列也能保证消息的可靠投递,不会导致消息丢失 
	 3.流量削峰
	 	流量削峰一般在秒杀活动中应用广泛 
		场景:秒杀活动，一般会因为流量过大，导致应用挂掉,为了解决这个问题，一般在应用前端加入消息队列。 
		作用: 
			1.可以控制活动人数，超过此一定阀值的订单直接丢弃(我为什么秒杀一次都没有成功过呢^^) 
			2.可以缓解短时间的高流量压垮应用(应用程序按自己的最大处理能力获取订单) 
		流程:
			1.用户的请求,服务器收到之后,首先写入消息队列,加入消息队列长度超过最大值,则直接抛弃用户请求或跳转到错误页面. 
			2.秒杀业务根据消息队列中的请求信息，再做后续处理.
	 4.日志处理
	 	日志处理是指将消息队列用在日志处理中，比如Kafka的应用，解决大量日志传输的问题。
	 	日志采集客户端，负责日志数据采集，定时写受写入Kafka队列；Kafka消息队列，负责日志数据的接收，存储和转发；日志处理应用：订阅并消费kafka队列中的日志数据。
	 	Kafka：接收用户日志的消息队列；
		Logstash：做日志解析，统一成JSON输出给Elasticsearch；
		Elasticsearch：实时日志分析服务的核心技术，一个schemaless，实时的数据存储服务，通过index组织数据，兼具强大的搜索和统计功能；
		Kibana：基于Elasticsearch的数据可视化组件，超强的数据可视化能力是众多公司选择ELK stack的重要原因。
	 5.消息通讯
	 	消息通讯是指，消息队列一般都内置了高效的通信机制，因此也可以用在纯的消息通讯。比如实现点对点消息队列，或者聊天室等。
	 	

	 
	 
	 */
	
}
