package com.xyh.cache.redis;

public class SingleThreadModel {
	
	
	/**
	 redis 单线程模型
	 	1.你之所以问这样的问题。是因为你认为只有多线程分别接收connection才可以更快，就像过去的tomcat那样，同时开多个线程来响应。
	 	(tomcat 多线程模型)
	 	然而多线程其实并不是最好的一种解决方案，多线程首先不能创建的太多，创建多了消耗很大。比如线程之间的上下文切换成本是非常高的。
	 	2.其实还有一种消耗更少，可以完美替代多线程模型的io模型，那就是操作系统底层的IO多路复用。在这种情况下，只需要一个线程来响应请求。
	 	然后进来的IO被以文件描述符的方式来新建。也就是由多个文件描述符的这种方式来替代多线程的方式
	 	
	 	说到多路复用。其实多路复用也有好几种，select、poll、epoll、evport、kqueue。
		下面主要介绍三种：
			1、select。
			2、poll。
			3、epoll。
		以上三种是在内核机制上对文件描述符（file descriptor）集合进行轮询的三种方式（过去是多线程，现在流行多文件描述符，
		Linux/Unix系统不是有句名言吗？一切皆文件，说就是文件描述符。）。本质上就是三个函数，下面分别介绍。
	
	 select
	 {
	 	
	 }
	 
	 
	
	 */
}
